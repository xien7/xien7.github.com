<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MyBatis学习笔记（二） Example]]></title>
    <url>%2F2017%2F10%2F27%2FMybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89-Example%2F</url>
    <content type="text"><![CDATA[本篇文章会搭建一个完备的简单的MyBatis程序。所有代码都是基于MyBatis 3.4.0进行的 Step１ Database创建数据库对应的表 1234567CREATE TABLE users ( id INT AUTO_INCREMENT, name VARCHAR(64) NOT NULL, description VARCHAR(255) NOT NULL DEFAULT &apos;&apos;, INDEX(name), PRIMARY KEY(id)) ENGINE = Innodb CHARSET = &apos;utf8&apos;; 创建了一个users的表，它有三个字： 一个自增长的主键id 一个VARCHAR类型的name字段，并且为它创建索引 一个VARCHAR类型的description字段 并且使用了Innodb作为存储引擎，字符集是UTF-8。 相关的POJO对象： 123456789package com.xien.example.pojo;public class UserBean &#123; private Integer id; private String name; private String description; // related getters and setters&#125; Step 2 MyBatis Configuration接下来需要创建MyBatis的配置文件mybatis-config.xml 12345678910111213141516171819202122&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3.config.dtd"&gt;&lt;configuration&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;transactionManager type="JDBC"/&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/user"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value=""/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource="user.xml"/&gt; &lt;/mappers&gt; &lt;/configuration&gt; MyBatis的配置文件是一个XML文件，在本例中，它只有简单的两个元素： environment, 负责配置一个环境，可以配置多个环境，以便在开发，测试时使用不同的环境。一个环境包含两个部分 transactionManager: 事务管理器，本例中使用JDBC事务管理 dataSource：数据库连接信息，本例中使用连接池 mappers, 定义映射器，本例中只有一个映射器 Step 3 Mapper接下来就该定义我们业务相关的映射器了。映射器是由一个Java接口和一个XML文件组成。 123456789101112131415package com.xien.example.dao;public interface UserDao &#123; public List&lt;UserBean&gt; getUsers(RowsBounds rowBounds); public UserBean getUser(Integer id); public UserBean getUserByName(String userName); public int insertUser(UserBean user); public int updateUser(UserBean user); public int deleteUser(Integer id);&#125; 12345678910111213141516171819202122232425262728293031&lt;?xml vesion=r"1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.xien.example.dao.UserDao"&gt; &lt;sql id="user_columns"&gt; id, name, description &lt;/sql&gt; &lt;select id="getUsers" resultType="com.xien.example.pojo.UserBean"&gt; SELECT &lt;include refid="user_columns"/&gt; FROM users &lt;/select&gt; &lt;select id="getUser" parameterType="int" resultType="com.xien.example.pojo.UserBean"&gt; SELECT &lt;include refid="user_columns"/&gt; FROM users WHERE id=#&#123;id&#125; &lt;/select&gt; &lt;select id="getUserByName" parameterType="string" resultType="com.xien.example.pojo.UserBean"&gt; SELECT &lt;include refid="user_columns"/&gt; FROM users WHERE name=#&#123;userName&#125; &lt;/select&gt; &lt;insert id="insertUser" parameterType="com.xien.example.pojo.UserBean"&gt; INSERT users(name, description) VALUE (#&#123;name&#125;, #&#123;description&#125;) &lt;/insert&gt; &lt;update id="updateUser" parameterType="com.xien.example.pojo.UserBean"&gt; UPDATE users SET name=#&#123;name&#125;, description=#&#123;description&#125; WHERE id=$&#123;id&#125; &lt;/update&gt; &lt;delete id="deleteUser" parameterType="int"&gt; DELETE FROM users WHERE id=#&#123;id&#125; &lt;/delete&gt;&lt;/mapper&gt; 至此，一个mapper定义完成了。可以看出来UserDao只是简单的定义了一些操作，包括它们名字，参数和返回值。这个接口方便开发者直接用Java进行调用，方便编译器的静态检查。另外，所有的SQL(业务逻辑)都是定义在XML映射文件中的。 namespace, 定义了这个映射对应的接口，也是一个命名空间。 sql, 这个是一个可选项，用来定义一个后面SQL语句中会经常用到的语句，本例中是列名，会被所有查询函数用到 select，表面这是一个查询的语句，id表面它对应的方法名。namespace + id = interface + method，既可以用来对应接口和映射文件，也可以用来全局唯一限定一个语句。 parameterType，用来指定参数类型的 resultType，用来指定返回的类型，MyBatis会自动识别返回的是一个对象还是一个对象的集合。 insert/update/delete，和select类型，只是它们默认的resultType是int, 表示SQL所影响的行数 Step 4 SqlSessionFactory &amp; SqlSession一切准备就绪了，可以把所有模块串在一起跑起来了 12345678910111213141516171819202122public class Example &#123; public static SqlSessionFactory getSqlSessionFactory() throw IOException &#123; String resource = "mybatis-config.xml"; return new SqlSessionFactoryBuilder() .build(Resources.getResourceAsStream(resource)); &#125; public static void main(String[] args) &#123; try (SqlSession session = getSqlSessionFactory().openSession()) &#123; UserDao userDao = session.getMapper(UserDao.class); UserBean user1 = new UserBean(); user1.setId(1); user1.setName("Xien"); user1.setDescription("Just a programmer"); userDao.insertUser(user1); UserBean user2 = userDao.getUser(1); userDao.deleteUser(1); &#125; &#125;&#125; MyBatis 的核心是SqlSession，可以理解为一个Transaction，通过它来拿到一个Ｍapper接口(通过动态代理实现)，然后对POJO和数据库进行操作。]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis学习笔记（一） 简介]]></title>
    <url>%2F2017%2F10%2F26%2FMybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89-%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[传统的JDBC编程JDBC(Java Data Base Connectivity) 是JAVA提供的数据库访问规范。典型的桥接模式，将各种数据库的访问抽象成一个同一的接口，再针对各种数据库，具体的实现。 初始化。（注册驱动，配置URL，Username，Password等配置）。Ｃlass.forName 是将具体的 Driver Class 加载到 JVM，然后通过它的静态初始化方法，把自身注册到 DriverManager 中。 获取Connection连接（通过 DriverManager 或者 DataSource ）。DriverManager 是典型的工厂方法模式，利用 URL的格式和参数，来创建对应的 Connection。 创建 Statement (包括PrepareStatement和CallableStatement) ，设置参数，执行SQL，查询请求会获取到ResultSet 通过ResultSet获得一行或多行数据。通过代码转换成POJO对象 关闭资源（ResultSet，Statement和Connection） 如果用到事务，还需要主动commit，以及捕获异常，然后rollback 这是通过JDBC操作数据库的一个标准流程，但是存在着很多问题： 工作量相对较大，大量重复的样板代码。重复是个坏味道; 需要对JDBC中可能出现的异常进行捕捉，处理，并且正确的关闭资源。 需要程序员自己解决 SQL 注入等安全问题 ORM由于JDBC的缺陷，实际工作中很少直接使用它(??) 于是提出了对象关系映射模型(ORM, Object Relational Mapping)。ORM就是关系型数据库表和简单Java对象( Plain Ordinary Java Object, 简称POJO)的映射关系模型。 Hibernate Hibernate 是一个流行的ORM框架，它具有以下特点： 消除了代码的映射规则，把它分离到XML或者注解的配置里 无需再手动管理数据库连接 无需再操作多个对象，只需要session即可，也只需要关闭session一个资源 但是它也是一个比较重的框架，基于全映射；不支持动态SQL；多表关联和复杂的SQL支持较差；不能很好的支持存储过程；虽然有HQL，但是性能较差 MyBatis MyBatis是一个半自动的持久化框架，它包含了SQL Maps和DAO(Data Access Objects)。除了提供映射关系以外，还需要我们自己提供SQL语句。它的映射文件包含了以下三个部分： SQL 映射规则 POJO 总结 JDBC在目前很少用到，它需要提供太多的代码，复杂的操作，还极其容易出问题 HIberate是一个流行全自动ORM的框架，但是因为它包装过多，失去了灵活性和性能 MyBatis是一个半自动的ORM框架，它提供了丰富而又灵活的功能。唯一的缺点是需要自己实现SQL，但也就是因为这样，给了程序员更好的灵活性。]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
        <tag>Database</tag>
      </tags>
  </entry>
</search>
